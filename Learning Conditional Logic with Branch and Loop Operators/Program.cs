// int a = 5;
// int b = 30;
// if (a + b > 10);
// Console.WriteLine("The answer is greater than 10.");
// // Если выполнение происходит в вашей среде, следуйте инструкциям для локальной версии.
// Измените объявление b, чтобы сумма была меньше 10:


// int b = 3;
// Нажмите кнопку Выполнить еще раз. Так как ответ меньше 10, никакие данные не выводятся. 
// Проверяемое условие имеет значение false. 
// У вас еще нет кода для выполнения, так как вы написали только одну из возможных ветвей для оператора if — ветвь true.

// В первом примере показаны возможности if и логические типы. Логическое значение — это переменная, 
// которая может иметь одно из двух значений: или false . Логические переменные в C# определяются особым типом — bool. 
// Оператор if проверяет значение bool. Если значение true, выполняется оператор, следующий после if. 
// В противном случае он пропускается.


// Чтобы выполнить разный код в ветвях true и false, создайте ветвь else, которая будет выполняться,
//  если условие имеет значение false. Попробуйте выполнить следующий код:


// int a = 5;
// int b = 3;
// if (a + b > 10)
//     Console.WriteLine("The answer is greater than 10");
// else
//     Console.WriteLine("The answer is not greater than 10");

// Оператор после ключевого слова else выполняется, только если проверяемое условие имеет значение false. 
// Объединив операторы if и else с логическими условиями, вы получите все необходимые возможности.

//  Важно!

// // Отступы под операторами if и else предназначены только для удобства чтения. 
// В языке C# необязательно ставить отступы или пробелы. 
// Операторы после ключевого слова if или else будут выполняться на основе условия. 
// Во всех строках в примерах кода, представленных в этом руководстве, 
// отступы традиционно соответствуют потоку управления операторов.

// Так как отступ не обязателен, используйте скобки { и }, если нужно указать несколько операторов в блоке кода, 
// который выполняется в зависимости от условий. Программисты C# обычно используют эти фигурные скобки 
// // во всех предложениях if и else. Следующий пример аналогичен тому, который вы создали. Выполните его.

// // int a = 5;
// // int b = 3;
// // if (a + b > 10)
// // {
// //     Console.WriteLine("The answer is greater than 10");
// // }
// // else
// // {
// //     Console.WriteLine("The answer is not greater than 10");
// // }
// //  Совет

// // Все примеры кода в следующих разделах руководства содержат фигурные скобки в соответствии с принятой практикой.
// // Можно проверить более сложные условия:

// int a = 5;
// int b = 3;
// int c = 4;
// if ((a + b + c > 10) && (a == b))
// {
//     Console.WriteLine("The answer is greater than 10");
//     Console.WriteLine("And the first number is equal to the second");
// }
// else
// {
//     Console.WriteLine("The answer is not greater than 10");
//     Console.WriteLine("Or the first number is not equal to the second");
// }
// // ==Символ проверяет на ==. С помощью == обозначается отличие проверки равенства от назначения, которое показано в a = 5.
// // && представляет оператор and. То есть для выполнения оператора в ветви true оба условия должны иметь значение true. 
// // В этих примерах также показано, что в каждой условной ветви можно задать несколько операторов. 
// // Нужно лишь заключить их в скобки { и }.
// // Можно также использовать || для представления "или":

// int a = 5;
// int b = 3;
// int c = 4;
// if ((a + b + c > 10) || (a == b))
// {
//     Console.WriteLine("The answer is greater than 10");
//     Console.WriteLine("Or the first number is equal to the second");
// }
// else
// {
//     Console.WriteLine("The answer is not greater than 10");
//     Console.WriteLine("And the first number is not equal to the second");
// }

// // Использование циклов для повторения операций

// Еще одной важной конструкцией для создания больших программ являются циклы.
//  Циклы используется для повторения операторов, которые должны выполняться несколько раз. 
//  Выполните следующий код в интерактивном окне:

// int counter = 0;
// while (counter < 10)
// {
//   Console.WriteLine($"Hello World! The counter is {counter}");
//   counter++;
// }
// Оператор while проверяет условие и выполняет инструкцию, следующую после while. 
// Проверка условия и выполнение этих операторов будут повторяться, пока условие не примет значение false.
// В этом примере представлен еще один новый оператор. ++Переменная после counter переменной является оператором ++ .
//  Он добавляет 1 к значению счетчика и сохраняет это значение в переменной счетчика.

//  Важно!

// Напишите такой код, при выполнении которого значение условия цикла while изменится на false.
// В противном случае будет создан бесконечный цикл, в котором выполнение программы никогда не закончится. 
// Мы не будем приводить пример, так как истечет время ожидания подсистемы, 
// в которой выполняется код, и вы не увидите выходных данных из программы.
// В цикле while условие проверяется, прежде чем выполнить код, который следует после while. 
// А в цикле do ... while сначала выполняется код, а потом проверяется условие. Это выглядит следующим образом:


// int counter = 0;
// do
// {
//   Console.WriteLine($"Hello World! The counter is {counter}");
//   counter++;
// } while (counter < 10);
// Этот цикл do и цикл while, приведенный выше, выполняются одинаково.
// Давайте перейдем к одному из последних операторов цикла.

// Работа с циклом for

// Еще один стандартный оператор цикла, который можно увидеть в C#, — это цикл for. Выполните следующий код в интерактивном окне:


// for(int counter = 0; counter < 10; counter++)
// {
//   Console.WriteLine($"Hello World! The counter is {counter}");
// }
// Этот цикл работает так же, как циклы while и do, использованные ранее. Оператор for состоит из трех частей, 
// которые отвечают за его работу.

// Первая часть — для инициализатора: объявляет, что counter это переменная цикла, и присваивает ей начальное значение 0 .

// Средняя часть — это условие for: объявляет, что этот for цикл продолжит выполняться, пока значение счетчика меньше 10.

// Последняя часть — итератор for: определяет, как изменить переменную цикла после выполнения блока for после оператора. 
// В нашем случае определяется, что значение counter должно увеличиваться на 1 каждый раз, когда выполняется блок.

// Попробуйте сделать это самостоятельно. Попытайтесь выполнить следующие задания:

// Измените инициализатор, чтобы цикл начинался с другого значения.
// Измените условие, чтобы цикл заканчивался другим значением.
// По окончании попробуйте самостоятельно написать код, чтобы применить полученные знания.

// Есть еще одна циклическая инструкция, которая не рассматривается в этом руководстве: оператор foreach. 
// Оператор foreach повторяет выполнения для каждого элемента в последовательности элементов. 
// Чаще всего он используется с коллекциями, поэтому он рассматривается в следующем руководстве.

// Создание вложенных циклов

// Цикл while, do или for можно вложить в другой цикл, чтобы создать матрицу, 
// комбинируя каждый элемент во внешнем цикле с каждым элементом во внутреннем цикле. 
// Давайте сделаем это для получения набора из буквенно-цифровых пар, представляющих строки и столбцы.

// Один цикл for может создавать строки:


// for (int row = 1; row < 11; row++)
// {
//   Console.WriteLine($"The row is {row}");
// }
// Другой цикл может создавать столбцы:


// for (char column = 'a'; column < 'k'; column++)
// {
//   Console.WriteLine($"The column is {column}");
// }
// Можно вложить один цикл внутрь другого для формирования пар:


// for (int row = 1; row < 11; row++)
// {
//   for (char column = 'a'; column < 'k'; column++)
//   {
//     Console.WriteLine($"The cell is ({row}, {column})");
//   }
// }
// Как видите, внешний цикл увеличивается на единицу при каждом полном выполнении внутреннего цикла. 
// Измените порядок вложенности строк и столбцов и просмотрите изменения самостоятельно.

// Объединение ветвей и циклов

// Теперь, когда вы ознакомились с оператором if и конструкциями цикла на языке C#, 
// попытайтесь написать код C# для поиска суммы всех целых чисел от 1 до 20, которые делятся на 3. Вот несколько подсказок:

// оператор % позволяет получить остаток от операции деления;
// оператор if предоставляет условие, которое позволяет определить, будет ли число учитываться в сумме;
// цикл for позволяет повторить последовательность шагов для всех чисел от 1 до 20.
// Попробуйте самостоятельно. Затем проверьте результат. Вы должны получить ответ "63".
var fibonacciNumbers = new List<int> {1, 1};

while (fibonacciNumbers.Count < 20)
{
    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

    fibonacciNumbers.Add(previous + previous2);
}
foreach(var item in fibonacciNumbers)
    Console.WriteLine(item);
